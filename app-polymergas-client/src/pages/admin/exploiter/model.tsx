// @ts-ignore
import modelExtend from 'dva-model-extend'
// @ts-ignore
import {model} from 'utils/model'
// @ts-ignore
import api from 'api'
// @ts-ignore
import {toast} from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css';

const {deleteUser, addAdditionalPhone, disableAndEnableUser, getUsers, addToAdmin} = api;

export default modelExtend(model, {
  namespace: 'exploiter',
  state: {
    pathname: "",
    delModalShow: false,
    addModal: false,
    currentMainColor: {},
    deleteId: 0,
    parentId: 0,
    loading: false,
    searchUsers: [],
    users: [],
    searchedUsers: [],
    totalElements:0,
    totalPages: 0,
    page: 0,
    size: 10,
  },
  subscriptions: {
    setup({dispatch, history}: { dispatch: any, history: any }) {
      history.listen((location: any) => {

      })
    }
  },
  effects: {
    * deleteUser({payload}: {
      payload: {
        fullName: string, phoneNumber: string, email: string,
        enabled: boolean
      }
    }, {put, call, select}: any) {
      yield put({
        type: "app/updateState",
        payload: {
          loading: true
        }
      })
      const res = yield call(deleteUser, payload);
      yield put({
        type: "app/updateState",
        payload: {
          loading: false
        }
      })
      if (res.success) {
        toast.success("Oʻchirildi!");
        yield put({
          type: 'app/getUsers',
        });
      } else {
        toast.error("Ishlatilgan ma'lumotni oʻchirish mumkin emas!");
      }
    },
    * getUsers({payload}: {payload:any}, {call, put, select}: any) {
      const res = yield call(getUsers, payload);
      if (res.success) {
        yield put({
          type: 'updateState',
          payload: {
            users: res.object.content,
            totalElements: res.object.totalElements
          }
        })
      }
      return res;
    },
    * addAdditionalPhone({payload}: { payload: any }, {call, put, select}: any) {
      const data = yield call(addAdditionalPhone, payload);
      if (data.success) {
        yield put({
          type: "updateState",
          payload: {}
        })
        toast.success(data.message)
      } else {
        toast.error(data.message);
      }
      return data
    },
    * disableAndEnableUser({payload}: { payload: any }, {call, put, select}: any) {
      const data = yield call(disableAndEnableUser, payload);
      if (data.success) {
        yield put({
          type: "updateState",
          payload: {}
        })
        toast.success(data.message)
      } else {
        toast.error(data.message);
      }
      return data
    },
    * addToAdmin({payload}: { payload: any }, {call, put, select}: any) {
      const data = yield call(addToAdmin, payload);
      if (data.success) {
        yield put({
          type: "updateState",
          payload: {}
        })
        toast.success(data.message)
      } else {
        toast.error(data.message);

      }
      return data

    }
  }
})
