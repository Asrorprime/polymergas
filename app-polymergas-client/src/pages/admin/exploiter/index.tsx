import React from 'react';
import './index.less'
import '../../../global.less'
import {Button, Col, Modal, ModalBody, ModalHeader, Row, UncontrolledTooltip} from "reactstrap";
import BenefitAdminLinksComponent from "@/component/BenefitAdminLinks/BenefitAdminLinksComponent";
// @ts-ignore
import {connect} from "dva";
// @ts-ignore
import 'react-toastify/dist/ReactToastify.css';
// @ts-ignore
import posed from 'react-pose';
// @ts-ignore
import {AvField, AvForm} from "availity-reactstrap-validation";
import {toast} from "react-toastify";
import Pagination from "react-js-pagination";


const Content = posed.div({
  closed: {height: 0},
  open: {height: 'auto'}
});

interface initialState {
  [x: string]: any;

  open: number | boolean,
  fullName: string,
  isAdmin: false,
  active: number
}

interface SearchParams {
  e: any;
  v: any;
}

// @ts-ignore
@connect(({exploiter, app}) => ({exploiter, app}))
class Index extends React.Component {
  state: initialState;
  props: any
  onSorting: any;

  constructor(props: any) {
    super(props);
    this.state = {
      open: false,
      fullName: "",
      isAdmin: false,
      sortType: 'all',
      active: 1,
      changedUser: {}
    }
  }

  handlePageChange(pageNumber: any) {
    this.setState({activePage: pageNumber});
    const {dispatch} = this.props;
    dispatch({
      type: 'exploiter/getUsers',
      payload: {
        page: pageNumber - 1,
        size: 10,
        admins: this.state.isAdmin
      }
    })
  }


  componentDidMount() {
    const {dispatch} = this.props;
    dispatch({
      type: 'exploiter/getUsers',
      payload: {
        page: 0,
        size: 10,
        admins: this.state.isAdmin
      }
    })
  }

  ;

  filter = (a, v) => {
    const {dispatch} = this.props;
    this.setState({sortType: v})
    dispatch({
      type: 'exploiter/getUsers',
      payload: {
        page: this.state.active - 1,
        size: 10,
        sortType: v,
        admins: this.state.isAdmin
      }
    })
  };

  render() {
    const {exploiter, dispatch, app} = this.props;

    const {delModalShow, deleteId, users, totalElements} = exploiter;

    const {open} = this.state;

    const data = [
      {
        title: "",
      }
    ];

    const search = (a: any, v: string) => {
      const {dispatch} = this.props;
        dispatch({
          type: 'exploiter/getUsers',
          payload: {
            page: 0,
            searchName: v.searchName,
            size: 10,
            admins: this.state.isAdmin,
            sortType: this.state.sortType
          }
        })
    }

    const deleteModalShow = (id: any | boolean) => {
      if (id !== -1) {
        this.setState({changedUser: id})
      }
      dispatch({
        type: 'exploiter/updateState',
        payload: {
          delModalShow: !delModalShow
        }
      });
    };

    const addToAdmin = (id: any, isAdmin: boolean) => {
      dispatch({
        type: "exploiter/addToAdmin",
        payload: {
          path: id,
          isAdmin: isAdmin
        }
      }).then((res: any) => {
        dispatch({
          type: 'exploiter/getUsers',
          payload: {
            page: this.state.active - 1,
            size: 10,
            admins: this.state.isAdmin,
            sortType: this.state.sortType
          }
        })
      })
    }

    const addAdditionalPhone = (a: any, v: string) => {
      dispatch({
        type: "exploiter/addAdditionalPhone",
        payload: {
          path: this.state.changedUser ? this.state.changedUser.id : '',
          additionalPhone: v.additionalPhone
        }
      }).then((res: any) => {
        dispatch({
          type: 'exploiter/getUsers',
          payload: {
            page: this.state.active - 1,
            size: 10,
            admins: this.state.isAdmin,
            sortType: this.state.sortType
          }
        })
        deleteModalShow(-1);
      })
    }

    const disableUser = (id: number | boolean, enable: boolean) => {
      dispatch({
        type: "exploiter/disableAndEnableUser",
        payload: {
          path: id,
          enable
        }
      }).then((res: any) => {
        dispatch({
          type: 'exploiter/getUsers',
        })
      })
    }

    const changePage = () => {
      this.state.isAdmin = !this.state.isAdmin;
      this.setState(this.state);
      dispatch({
        type: 'exploiter/getUsers',
        payload: {
          page: 0,
          size: 10,
          admins: this.state.isAdmin,
          sortType: this.state.sortType
        }
      }).then((res: any) => {
        toast.success('Ro`yxat almashdi!')
      })
    };

    return (
      <div className="container-fluid position-relative p-0">
        <div className="position-absolute menuLinkIcon">
          <BenefitAdminLinksComponent/>
        </div>
        <Row className="m-0">
          <Col md={12} className="p-0">
            <div className="app-navbar">
              <div className="row m-0">
                <div className="col-12 col-lg-4">
                  <div className="appNavbarHeaderCheckbox d-flex align-items-center h-100">
                    <div className="">
                      <p className="fs-12 pl-3 mr-3 font-family-semi-bold mb-0">
                        Foydalanuvchilar
                      </p>
                    </div>

                    <div className="">
                      <label className="switch mb-0">
                        <input type="checkbox"
                               onChange={() => changePage()}
                               checked={this.state.isAdmin}/>
                        <div className="slider round"/>
                      </label>
                    </div>

                    <div className="">
                      <p className="fs-12 pl-3 font-family-semi-bold mb-0">
                        Adminlar
                      </p>
                    </div>
                  </div>
                </div>
                <div className="col-lg-8 d-none-mb h-88">
                  <div className="h-100">
                    <div className="d-flex position-relative align-items-center h-100 ml-3">
                      <div className="row">
                        <div className="col-md-6">
                          <AvForm onValidSubmit={search} className="search-form">
                            <div className="input-group">
                              <AvField type="text" className="form-control" name="searchName"
                                // onChange={this.search}
                                       id="search"
                                       placeholder="Qidirish"/>
                              <div className="input-group-append">
                                <div className="">
                                  <div className="d-flex justify-content-end">
                                    <div className="">
                                      <button type="submit" className="searchIcon">
                                        <span className="icon icon-search"/>
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </AvForm>
                        </div>
                        <div className="col-md-6">
                          <AvForm className='input-group'>
                            <AvField type="select" name="sortType"
                                     id="sddsds"
                                     placeholder="Qidirish"
                                     className='filterm bg-light ml-3'
                                     onChange={this.filter}
                            >
                              <option value="all">Barchasi</option>
                              <option value="enabled">Aktiv foydalanuvchilar
                              </option>
                              <option value="unEnabled">Blocklangan foydalanuvchilar</option>

                            </AvField>
                          </AvForm>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <Row className="m-0 mt-5">
              <Col md={12} className="app-information-col table-responsive-sm">
                <table className="app-information-user">
                  <tr>
                    <th scope="col" className="text-left fs-11 font-family-bold pl-2">FISH</th>
                    <th scope="col" className="text-left fs-11 font-family-bold">TELEFON RAQAMI
                    </th>
                    <th scope="col" className="text-left fs-11 font-family-bold">QO`SHIMCHA RAQAMI
                    </th>
                    <th scope="col" className="text-left fs-11 font-family-bold">STATUS</th>
                    <th scope="col" className="text-left fs-11 font-family-bold">AMAL</th>
                  </tr>
                  <tbody className="app-information2-user">
                  {users.length ?
                    users.map((item: {
                        id: number; fullName: React.ReactNode; phoneNumber: React.ReactNode; additionalPhone: React.ReactNode;
                        enabled: any;
                      }, i: any) =>
                        <tr key={i} className="all-hover-tr boxShadowCards pointer">
                          <th className="text-left pl-2">
                            <h6>{item.fullName}</h6>
                          </th>
                          <th className="text-left">
                            <h6>{item.phoneNumber}</h6>
                          </th>
                          <th className="text-left">
                            <h6>{item.additionalPhone ? item.additionalPhone : 'Mavjud emas!'}</h6>
                          </th>
                          <th className="text-left">
                            <h6>
                              <p className="statusActiveText mb-0">{item.enabled ? "Aktiv" : "Aktiv emas"}</p>
                              <label className="switch">
                                <input type="checkbox"
                                       onChange={() => disableUser(item.id, !item.enabled)}
                                       checked={item.enabled}/>
                                <div className="slider round"/>
                              </label>
                            </h6>
                          </th>
                          <th className="text-left">
                            <div className="tbody-div d-flex">
                              <div className="change-order-btn btn-size-md">
                                <button id="additionalPhone" onClick={() => deleteModalShow(item)}>
                                  <span className="icon icon-phone"/>
                                </button>
                                <UncontrolledTooltip placement="right" target="additionalPhone">
                                  Qo'shimcha raqamni o'zgartirish
                                </UncontrolledTooltip>
                              </div>
                            </div>
                            {this.state.isAdmin ? <div className="tbody-div d-flex">
                                <div className="change-order-btn btn-size-md">
                                  <button
                                    id="toAdmin1"
                                    onClick={() => addToAdmin(item.id, false)}>
                                    <span className="icon icon-logout"/>
                                  </button>
                                  <UncontrolledTooltip placement="right" target="toAdmin1">
                                    Admin darajasini olib tashlash
                                  </UncontrolledTooltip>
                                </div>
                              </div> :
                              <div className="tbody-div d-flex">
                                <div className="change-order-btn btn-size-md">
                                  <button
                                    id="toAdmin2"
                                    onClick={() => addToAdmin(item.id, true)}>
                                    <span className="icon icon-user"/>
                                  </button>
                                  <UncontrolledTooltip placement="right" target="toAdmin2">
                                    Admin darajasiga ko'tarish
                                  </UncontrolledTooltip>
                                </div>
                              </div>}
                          </th>
                        </tr>
                    ) :
                    <tr className="boxShadowCards">
                      <th colSpan={12}>
                        <h6 className="mb-0 ">Ma'lumot mavjud emas !</h6>
                      </th>
                    </tr>}
                  </tbody>
                </table>
              </Col>
            </Row>
            <div className={totalElements ? "my-paginate" : 'd-none'}>
              <Pagination
                activePage={this.state.activePage}
                itemsCountPerPage={10}
                totalItemsCount={totalElements ? totalElements : ''}
                pageRangeDisplayed={5}
                onChange={this.handlePageChange.bind(this)}
              />
            </div>
          </Col>
        </Row>

        <div className='right-modal'>
          <Modal id="leftsite" className="" centered={true} isOpen={delModalShow}
                 toggle={() => deleteModalShow(false)}>
            <ModalHeader className='position-relative' toggle={() => deleteModalShow(false)}>
              <p className="mb-0 fs-16 font-family-semi-bold">Qo'shimcha raqamni o`zgartirish</p>
            </ModalHeader>
            <ModalBody>
              <AvForm onValidSubmit={addAdditionalPhone} className="formModall">
                <div className="d-flex flex-column h-100">
                  <div className="">
                    <p className="mb-0 fs-16 font-family-medium text-center">Foydalanuvchining qo`shimcha raqamini
                      o`zgartirmoqchimisiz?</p>
                  </div>
                  <div className="row mt-3">
                    <div className="col">
                      <AvField label={'Raqamni kiriting'}
                               defaultValue={this.state.changedUser ? this.state.changedUser.id ? this.state.changedUser.additionalPhone : null : null}
                               name="additionalPhone"
                               placeHolder={'---------'} required/>
                    </div>

                  </div>
                  <div className="mt-auto mb-2">
                    <div className="d-flex justify-content-start">
                      <div className="">
                        <Button type="submit" className="deleteBtnBenefit benefitBtn mx-2"
                        >O`zgartirish</Button>
                        <Button className="benefitBtn cancelBtnBenefit"
                                onClick={() => deleteModalShow(false)}>Bekor
                          qilish</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </AvForm>
            </ModalBody>
          </Modal>
        </div>
      </div>
    );
  }
}

export default Index;
